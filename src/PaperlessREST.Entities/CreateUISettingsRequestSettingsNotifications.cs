/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs
    public partial class ApiuiSettingsSettingsNotifications : IEquatable<ApiuiSettingsSettingsNotifications>
========
    public partial class CreateUISettingsRequestSettingsNotifications : IEquatable<CreateUISettingsRequestSettingsNotifications>
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs
    {
        /// <summary>
        /// Gets or Sets ConsumerNewDocuments
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs

        [DataMember(Name = "consumer_new_documents")]
        public bool? ConsumerNewDocuments { get; set; }
========
        [DataMember(Name = "consumer_new_documents", EmitDefaultValue = true)]
        public bool ConsumerNewDocuments { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs

        /// <summary>
        /// Gets or Sets ConsumerSuccess
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs

        [DataMember(Name = "consumer_success")]
        public bool? ConsumerSuccess { get; set; }
========
        [DataMember(Name = "consumer_success", EmitDefaultValue = true)]
        public bool ConsumerSuccess { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs

        /// <summary>
        /// Gets or Sets ConsumerFailed
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs

        [DataMember(Name = "consumer_failed")]
        public bool? ConsumerFailed { get; set; }
========
        [DataMember(Name = "consumer_failed", EmitDefaultValue = true)]
        public bool ConsumerFailed { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs

        /// <summary>
        /// Gets or Sets ConsumerSuppressOnDashboard
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs

        [DataMember(Name = "consumer_suppress_on_dashboard")]
        public bool? ConsumerSuppressOnDashboard { get; set; }
========
        [DataMember(Name = "consumer_suppress_on_dashboard", EmitDefaultValue = true)]
        public bool ConsumerSuppressOnDashboard { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUISettingsRequestSettingsNotifications {\n");
            sb.Append("  ConsumerNewDocuments: ").Append(ConsumerNewDocuments).Append("\n");
            sb.Append("  ConsumerSuccess: ").Append(ConsumerSuccess).Append("\n");
            sb.Append("  ConsumerFailed: ").Append(ConsumerFailed).Append("\n");
            sb.Append("  ConsumerSuppressOnDashboard: ").Append(ConsumerSuppressOnDashboard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateUISettingsRequestSettingsNotifications)obj);
        }

        /// <summary>
        /// Returns true if CreateUISettingsRequestSettingsNotifications instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateUISettingsRequestSettingsNotifications to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUISettingsRequestSettingsNotifications other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    ConsumerNewDocuments == other.ConsumerNewDocuments ||

                    ConsumerNewDocuments.Equals(other.ConsumerNewDocuments)
                ) &&
                (
                    ConsumerSuccess == other.ConsumerSuccess ||

                    ConsumerSuccess.Equals(other.ConsumerSuccess)
                ) &&
                (
                    ConsumerFailed == other.ConsumerFailed ||

                    ConsumerFailed.Equals(other.ConsumerFailed)
                ) &&
                (
                    ConsumerSuppressOnDashboard == other.ConsumerSuppressOnDashboard ||

                    ConsumerSuppressOnDashboard.Equals(other.ConsumerSuppressOnDashboard)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettingsNotifications.cs
                if (ConsumerNewDocuments != null)
                    hashCode = hashCode * 59 + ConsumerNewDocuments.GetHashCode();
                if (ConsumerSuccess != null)
                    hashCode = hashCode * 59 + ConsumerSuccess.GetHashCode();
                if (ConsumerFailed != null)
                    hashCode = hashCode * 59 + ConsumerFailed.GetHashCode();
                if (ConsumerSuppressOnDashboard != null)
                    hashCode = hashCode * 59 + ConsumerSuppressOnDashboard.GetHashCode();
========

                hashCode = hashCode * 59 + ConsumerNewDocuments.GetHashCode();

                hashCode = hashCode * 59 + ConsumerSuccess.GetHashCode();

                hashCode = hashCode * 59 + ConsumerFailed.GetHashCode();

                hashCode = hashCode * 59 + ConsumerSuppressOnDashboard.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettingsNotifications.cs
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CreateUISettingsRequestSettingsNotifications left, CreateUISettingsRequestSettingsNotifications right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateUISettingsRequestSettingsNotifications left, CreateUISettingsRequestSettingsNotifications right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
