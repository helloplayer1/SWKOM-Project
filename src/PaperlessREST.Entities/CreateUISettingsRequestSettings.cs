/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs
    public partial class ApiuiSettingsSettings : IEquatable<ApiuiSettingsSettings>
========
    public partial class CreateUISettingsRequestSettings : IEquatable<CreateUISettingsRequestSettings>
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs
    {
        /// <summary>
        /// Gets or Sets UpdateChecking
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "update_checking")]
        public ApiuiSettingsSettingsUpdateChecking UpdateChecking { get; set; }
========
        [DataMember(Name = "update_checking", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsUpdateChecking UpdateChecking { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets TourComplete
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "tour_complete")]
        public bool? TourComplete { get; set; }
========
        [DataMember(Name = "tour_complete", EmitDefaultValue = true)]
        public bool TourComplete { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets BulkEdit
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "bulk_edit")]
        public ApiuiSettingsSettingsBulkEdit BulkEdit { get; set; }
========
        [DataMember(Name = "bulk_edit", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsBulkEdit BulkEdit { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets DocumentListSize
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "documentListSize")]
        public int? DocumentListSize { get; set; }
========
        [DataMember(Name = "documentListSize", EmitDefaultValue = true)]
        public int DocumentListSize { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets SlimSidebar
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "slim_sidebar")]
        public bool? SlimSidebar { get; set; }
========
        [DataMember(Name = "slim_sidebar", EmitDefaultValue = true)]
        public bool SlimSidebar { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets DarkMode
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "dark_mode")]
        public ApiuiSettingsSettingsDarkMode DarkMode { get; set; }
========
        [DataMember(Name = "dark_mode", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsDarkMode DarkMode { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "theme")]
        public ApiuiSettingsSettingsTheme Theme { get; set; }
========
        [DataMember(Name = "theme", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsTheme Theme { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets DocumentDetails
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "document_details")]
        public ApiuiSettingsSettingsDocumentDetails DocumentDetails { get; set; }
========
        [DataMember(Name = "document_details", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsDocumentDetails DocumentDetails { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets DateDisplay
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "date_display")]
        public ApiuiSettingsSettingsDateDisplay DateDisplay { get; set; }
========
        [DataMember(Name = "date_display", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsDateDisplay DateDisplay { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "notifications")]
        public ApiuiSettingsSettingsNotifications Notifications { get; set; }
========
        [DataMember(Name = "notifications", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsNotifications Notifications { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets NotesEnabled
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "notes_enabled")]
        public bool? NotesEnabled { get; set; }
========
        [DataMember(Name = "notes_enabled", EmitDefaultValue = true)]
        public bool NotesEnabled { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets SavedViews
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "saved_views")]
        public ApiuiSettingsSettingsSavedViews SavedViews { get; set; }
========
        [DataMember(Name = "saved_views", EmitDefaultValue = false)]
        public CreateUISettingsRequestSettingsSavedViews SavedViews { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs

        [DataMember(Name = "language")]
========
        [DataMember(Name = "language", EmitDefaultValue = false)]
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUISettingsRequestSettings {\n");
            sb.Append("  UpdateChecking: ").Append(UpdateChecking).Append("\n");
            sb.Append("  TourComplete: ").Append(TourComplete).Append("\n");
            sb.Append("  BulkEdit: ").Append(BulkEdit).Append("\n");
            sb.Append("  DocumentListSize: ").Append(DocumentListSize).Append("\n");
            sb.Append("  SlimSidebar: ").Append(SlimSidebar).Append("\n");
            sb.Append("  DarkMode: ").Append(DarkMode).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  DocumentDetails: ").Append(DocumentDetails).Append("\n");
            sb.Append("  DateDisplay: ").Append(DateDisplay).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  NotesEnabled: ").Append(NotesEnabled).Append("\n");
            sb.Append("  SavedViews: ").Append(SavedViews).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateUISettingsRequestSettings)obj);
        }

        /// <summary>
        /// Returns true if CreateUISettingsRequestSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateUISettingsRequestSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUISettingsRequestSettings other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    UpdateChecking == other.UpdateChecking ||
                    UpdateChecking != null &&
                    UpdateChecking.Equals(other.UpdateChecking)
                ) &&
                (
                    TourComplete == other.TourComplete ||

                    TourComplete.Equals(other.TourComplete)
                ) &&
                (
                    BulkEdit == other.BulkEdit ||
                    BulkEdit != null &&
                    BulkEdit.Equals(other.BulkEdit)
                ) &&
                (
                    DocumentListSize == other.DocumentListSize ||

                    DocumentListSize.Equals(other.DocumentListSize)
                ) &&
                (
                    SlimSidebar == other.SlimSidebar ||

                    SlimSidebar.Equals(other.SlimSidebar)
                ) &&
                (
                    DarkMode == other.DarkMode ||
                    DarkMode != null &&
                    DarkMode.Equals(other.DarkMode)
                ) &&
                (
                    Theme == other.Theme ||
                    Theme != null &&
                    Theme.Equals(other.Theme)
                ) &&
                (
                    DocumentDetails == other.DocumentDetails ||
                    DocumentDetails != null &&
                    DocumentDetails.Equals(other.DocumentDetails)
                ) &&
                (
                    DateDisplay == other.DateDisplay ||
                    DateDisplay != null &&
                    DateDisplay.Equals(other.DateDisplay)
                ) &&
                (
                    Notifications == other.Notifications ||
                    Notifications != null &&
                    Notifications.Equals(other.Notifications)
                ) &&
                (
                    NotesEnabled == other.NotesEnabled ||

                    NotesEnabled.Equals(other.NotesEnabled)
                ) &&
                (
                    SavedViews == other.SavedViews ||
                    SavedViews != null &&
                    SavedViews.Equals(other.SavedViews)
                ) &&
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (UpdateChecking != null)
                    hashCode = hashCode * 59 + UpdateChecking.GetHashCode();
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs
                if (TourComplete != null)
                    hashCode = hashCode * 59 + TourComplete.GetHashCode();
                if (BulkEdit != null)
                    hashCode = hashCode * 59 + BulkEdit.GetHashCode();
                if (DocumentListSize != null)
                    hashCode = hashCode * 59 + DocumentListSize.GetHashCode();
                if (SlimSidebar != null)
                    hashCode = hashCode * 59 + SlimSidebar.GetHashCode();
========

                hashCode = hashCode * 59 + TourComplete.GetHashCode();
                if (BulkEdit != null)
                    hashCode = hashCode * 59 + BulkEdit.GetHashCode();

                hashCode = hashCode * 59 + DocumentListSize.GetHashCode();

                hashCode = hashCode * 59 + SlimSidebar.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs
                if (DarkMode != null)
                    hashCode = hashCode * 59 + DarkMode.GetHashCode();
                if (Theme != null)
                    hashCode = hashCode * 59 + Theme.GetHashCode();
                if (DocumentDetails != null)
                    hashCode = hashCode * 59 + DocumentDetails.GetHashCode();
                if (DateDisplay != null)
                    hashCode = hashCode * 59 + DateDisplay.GetHashCode();
                if (Notifications != null)
                    hashCode = hashCode * 59 + Notifications.GetHashCode();
<<<<<<<< HEAD:src/PaperlessREST.Entities/ApiuiSettingsSettings.cs
                if (NotesEnabled != null)
                    hashCode = hashCode * 59 + NotesEnabled.GetHashCode();
========

                hashCode = hashCode * 59 + NotesEnabled.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/CreateUISettingsRequestSettings.cs
                if (SavedViews != null)
                    hashCode = hashCode * 59 + SavedViews.GetHashCode();
                if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CreateUISettingsRequestSettings left, CreateUISettingsRequestSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateUISettingsRequestSettings left, CreateUISettingsRequestSettings right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
