/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs
    public partial class InlineResponse2002Notes : IEquatable<InlineResponse2002Notes>
========
    public partial class GetDocuments200ResponseResultsInnerNotesInner : IEquatable<GetDocuments200ResponseResultsInnerNotesInner>
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs

        [DataMember(Name = "id")]
        public int? Id { get; set; }
========
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs

        [DataMember(Name = "note")]
========
        [DataMember(Name = "note", EmitDefaultValue = false)]
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs

        [DataMember(Name = "created")]
========
        [DataMember(Name = "created", EmitDefaultValue = false)]
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs
        public string Created { get; set; }

        /// <summary>
        /// Gets or Sets Document
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs

        [DataMember(Name = "document")]
        public int? Document { get; set; }
========
        [DataMember(Name = "document", EmitDefaultValue = true)]
        public int Document { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs

        [DataMember(Name = "user")]
        public int? User { get; set; }
========
        [DataMember(Name = "user", EmitDefaultValue = true)]
        public int User { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDocuments200ResponseResultsInnerNotesInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  DocumentDto: ").Append(Document).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetDocuments200ResponseResultsInnerNotesInner)obj);
        }

        /// <summary>
        /// Returns true if GetDocuments200ResponseResultsInnerNotesInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GetDocuments200ResponseResultsInnerNotesInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDocuments200ResponseResultsInnerNotesInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||

                    Id.Equals(other.Id)
                ) &&
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) &&
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) &&
                (
                    Document == other.Document ||

                    Document.Equals(other.Document)
                ) &&
                (
                    User == other.User ||

                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs
                if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
========

                hashCode = hashCode * 59 + Id.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs
                if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse2002Notes.cs
                if (Document != null)
                    hashCode = hashCode * 59 + Document.GetHashCode();
                if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
========

                hashCode = hashCode * 59 + Document.GetHashCode();

                hashCode = hashCode * 59 + User.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/GetDocuments200ResponseResultsInnerNotesInner.cs
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(GetDocuments200ResponseResultsInnerNotesInner left, GetDocuments200ResponseResultsInnerNotesInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetDocuments200ResponseResultsInnerNotesInner left, GetDocuments200ResponseResultsInnerNotesInner right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
