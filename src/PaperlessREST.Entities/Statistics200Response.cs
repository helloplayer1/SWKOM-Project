/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs
    public partial class InlineResponse20011 : IEquatable<InlineResponse20011>
========
    public partial class Statistics200Response : IEquatable<Statistics200Response>
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs
    {
        /// <summary>
        /// Gets or Sets DocumentsTotal
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs

        [DataMember(Name = "documents_total")]
        public int? DocumentsTotal { get; set; }
========
        [DataMember(Name = "documents_total", EmitDefaultValue = true)]
        public int DocumentsTotal { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs

        /// <summary>
        /// Gets or Sets DocumentsInbox
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs

        [DataMember(Name = "documents_inbox")]
        public int? DocumentsInbox { get; set; }
========
        [DataMember(Name = "documents_inbox", EmitDefaultValue = true)]
        public int DocumentsInbox { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs

        /// <summary>
        /// Gets or Sets InboxTag
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs

        [DataMember(Name = "inbox_tag")]
        public int? InboxTag { get; set; }
========
        [DataMember(Name = "inbox_tag", EmitDefaultValue = true)]
        public int InboxTag { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs

        /// <summary>
        /// Gets or Sets DocumentFileTypeCounts
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs

        [DataMember(Name = "document_file_type_counts")]
        public List<InlineResponse20011DocumentFileTypeCounts> DocumentFileTypeCounts { get; set; }
========
        [DataMember(Name = "document_file_type_counts", EmitDefaultValue = false)]
        public List<Statistics200ResponseDocumentFileTypeCountsInner> DocumentFileTypeCounts { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs

        /// <summary>
        /// Gets or Sets CharacterCount
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs

        [DataMember(Name = "character_count")]
        public int? CharacterCount { get; set; }
========
        [DataMember(Name = "character_count", EmitDefaultValue = true)]
        public int CharacterCount { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Statistics200Response {\n");
            sb.Append("  DocumentsTotal: ").Append(DocumentsTotal).Append("\n");
            sb.Append("  DocumentsInbox: ").Append(DocumentsInbox).Append("\n");
            sb.Append("  InboxTag: ").Append(InboxTag).Append("\n");
            sb.Append("  DocumentFileTypeCounts: ").Append(DocumentFileTypeCounts).Append("\n");
            sb.Append("  CharacterCount: ").Append(CharacterCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Statistics200Response)obj);
        }

        /// <summary>
        /// Returns true if Statistics200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of Statistics200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Statistics200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DocumentsTotal == other.DocumentsTotal ||

                    DocumentsTotal.Equals(other.DocumentsTotal)
                ) &&
                (
                    DocumentsInbox == other.DocumentsInbox ||

                    DocumentsInbox.Equals(other.DocumentsInbox)
                ) &&
                (
                    InboxTag == other.InboxTag ||

                    InboxTag.Equals(other.InboxTag)
                ) &&
                (
                    DocumentFileTypeCounts == other.DocumentFileTypeCounts ||
                    DocumentFileTypeCounts != null &&
                    other.DocumentFileTypeCounts != null &&
                    DocumentFileTypeCounts.SequenceEqual(other.DocumentFileTypeCounts)
                ) &&
                (
                    CharacterCount == other.CharacterCount ||

                    CharacterCount.Equals(other.CharacterCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20011.cs
                if (DocumentsTotal != null)
                    hashCode = hashCode * 59 + DocumentsTotal.GetHashCode();
                if (DocumentsInbox != null)
                    hashCode = hashCode * 59 + DocumentsInbox.GetHashCode();
                if (InboxTag != null)
                    hashCode = hashCode * 59 + InboxTag.GetHashCode();
                if (DocumentFileTypeCounts != null)
                    hashCode = hashCode * 59 + DocumentFileTypeCounts.GetHashCode();
                if (CharacterCount != null)
                    hashCode = hashCode * 59 + CharacterCount.GetHashCode();
========

                hashCode = hashCode * 59 + DocumentsTotal.GetHashCode();

                hashCode = hashCode * 59 + DocumentsInbox.GetHashCode();

                hashCode = hashCode * 59 + InboxTag.GetHashCode();
                if (DocumentFileTypeCounts != null)
                    hashCode = hashCode * 59 + DocumentFileTypeCounts.GetHashCode();

                hashCode = hashCode * 59 + CharacterCount.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/Statistics200Response.cs
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(Statistics200Response left, Statistics200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Statistics200Response left, Statistics200Response right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
