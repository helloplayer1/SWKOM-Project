/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetTasks200ResponseInner : IEquatable<GetTasks200ResponseInner>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [Required]
        [DataMember(Name = "task_id", EmitDefaultValue = false)]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskFileName
        /// </summary>
        [Required]
        [DataMember(Name = "task_file_name", EmitDefaultValue = false)]
        public string TaskFileName { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [Required]
        [DataMember(Name = "date_created", EmitDefaultValue = false)]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateDone
        /// </summary>
        [DataMember(Name = "date_done", EmitDefaultValue = false)]
        public string DateDone { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [Required]
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public string Result { get; set; }

        /// <summary>
        /// Gets or Sets Acknowledged
        /// </summary>
        [Required]
        [DataMember(Name = "acknowledged", EmitDefaultValue = true)]
        public bool Acknowledged { get; set; }

        /// <summary>
        /// Gets or Sets RelatedDocument
        /// </summary>
        [DataMember(Name = "related_document", EmitDefaultValue = false)]
        public string RelatedDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetTasks200ResponseInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskFileName: ").Append(TaskFileName).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateDone: ").Append(DateDone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Acknowledged: ").Append(Acknowledged).Append("\n");
            sb.Append("  RelatedDocument: ").Append(RelatedDocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetTasks200ResponseInner)obj);
        }

        /// <summary>
        /// Returns true if GetTasks200ResponseInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GetTasks200ResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetTasks200ResponseInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Id == other.Id ||

                    Id.Equals(other.Id)
                ) &&
                (
                    TaskId == other.TaskId ||
                    TaskId != null &&
                    TaskId.Equals(other.TaskId)
                ) &&
                (
                    TaskFileName == other.TaskFileName ||
                    TaskFileName != null &&
                    TaskFileName.Equals(other.TaskFileName)
                ) &&
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) &&
                (
                    DateDone == other.DateDone ||
                    DateDone != null &&
                    DateDone.Equals(other.DateDone)
                ) &&
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) &&
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) &&
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) &&
                (
                    Acknowledged == other.Acknowledged ||

                    Acknowledged.Equals(other.Acknowledged)
                ) &&
                (
                    RelatedDocument == other.RelatedDocument ||
                    RelatedDocument != null &&
                    RelatedDocument.Equals(other.RelatedDocument)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)

                hashCode = hashCode * 59 + Id.GetHashCode();
                if (TaskId != null)
                    hashCode = hashCode * 59 + TaskId.GetHashCode();
                if (TaskFileName != null)
                    hashCode = hashCode * 59 + TaskFileName.GetHashCode();
                if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                if (DateDone != null)
                    hashCode = hashCode * 59 + DateDone.GetHashCode();
                if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();

                hashCode = hashCode * 59 + Acknowledged.GetHashCode();
                if (RelatedDocument != null)
                    hashCode = hashCode * 59 + RelatedDocument.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(GetTasks200ResponseInner left, GetTasks200ResponseInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetTasks200ResponseInner left, GetTasks200ResponseInner right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
