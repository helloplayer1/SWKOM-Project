/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20020.cs
    public partial class InlineResponse20020 : IEquatable<InlineResponse20020>
========
    public partial class AckTasks200Response : IEquatable<AckTasks200Response>
>>>>>>>> dev:src/PaperlessREST.Entities/AckTasks200Response.cs
    {
        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [Required]
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20020.cs

        [DataMember(Name = "result")]
        public int? Result { get; set; }
========
        [DataMember(Name = "result", EmitDefaultValue = true)]
        public int Result { get; set; }
>>>>>>>> dev:src/PaperlessREST.Entities/AckTasks200Response.cs

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AckTasks200Response {\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AckTasks200Response)obj);
        }

        /// <summary>
        /// Returns true if AckTasks200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of AckTasks200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AckTasks200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                
                    Result == other.Result ||

                    Result.Equals(other.Result)
                ;
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
<<<<<<<< HEAD:src/PaperlessREST.Entities/InlineResponse20020.cs
                if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
========

                hashCode = hashCode * 59 + Result.GetHashCode();
>>>>>>>> dev:src/PaperlessREST.Entities/AckTasks200Response.cs
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(AckTasks200Response left, AckTasks200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AckTasks200Response left, AckTasks200Response right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
