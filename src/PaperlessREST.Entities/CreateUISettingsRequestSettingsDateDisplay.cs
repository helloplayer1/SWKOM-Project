/*
 * Paperless Rest Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using PaperlessREST.Entities.Converters;

namespace PaperlessREST.Entities
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateUISettingsRequestSettingsDateDisplay : IEquatable<CreateUISettingsRequestSettingsDateDisplay>
    {
        /// <summary>
        /// Gets or Sets DateLocale
        /// </summary>
        [Required]
        [DataMember(Name = "date_locale", EmitDefaultValue = false)]
        public string DateLocale { get; set; }

        /// <summary>
        /// Gets or Sets DateFormat
        /// </summary>
        [Required]
        [DataMember(Name = "date_format", EmitDefaultValue = false)]
        public string DateFormat { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateUISettingsRequestSettingsDateDisplay {\n");
            sb.Append("  DateLocale: ").Append(DateLocale).Append("\n");
            sb.Append("  DateFormat: ").Append(DateFormat).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateUISettingsRequestSettingsDateDisplay)obj);
        }

        /// <summary>
        /// Returns true if CreateUISettingsRequestSettingsDateDisplay instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateUISettingsRequestSettingsDateDisplay to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateUISettingsRequestSettingsDateDisplay other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    DateLocale == other.DateLocale ||
                    DateLocale != null &&
                    DateLocale.Equals(other.DateLocale)
                ) &&
                (
                    DateFormat == other.DateFormat ||
                    DateFormat != null &&
                    DateFormat.Equals(other.DateFormat)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (DateLocale != null)
                    hashCode = hashCode * 59 + DateLocale.GetHashCode();
                if (DateFormat != null)
                    hashCode = hashCode * 59 + DateFormat.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(CreateUISettingsRequestSettingsDateDisplay left, CreateUISettingsRequestSettingsDateDisplay right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateUISettingsRequestSettingsDateDisplay left, CreateUISettingsRequestSettingsDateDisplay right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
