/*
 * Paperless Rest Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20019 : IEquatable<InlineResponse20019>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]

        [DataMember(Name="id")]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets TaskId
        /// </summary>
        [Required]

        [DataMember(Name="task_id")]
        public string TaskId { get; set; }

        /// <summary>
        /// Gets or Sets TaskFileName
        /// </summary>
        [Required]

        [DataMember(Name="task_file_name")]
        public string TaskFileName { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [Required]

        [DataMember(Name="date_created")]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateDone
        /// </summary>

        [DataMember(Name="date_done")]
        public string DateDone { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]

        [DataMember(Name="type")]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [Required]

        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets Result
        /// </summary>
        [Required]

        [DataMember(Name="result")]
        public string Result { get; set; }

        /// <summary>
        /// Gets or Sets Acknowledged
        /// </summary>
        [Required]

        [DataMember(Name="acknowledged")]
        public bool? Acknowledged { get; set; }

        /// <summary>
        /// Gets or Sets RelatedDocument
        /// </summary>

        [DataMember(Name="related_document")]
        public string RelatedDocument { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20019 {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  TaskId: ").Append(TaskId).Append("\n");
            sb.Append("  TaskFileName: ").Append(TaskFileName).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateDone: ").Append(DateDone).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Acknowledged: ").Append(Acknowledged).Append("\n");
            sb.Append("  RelatedDocument: ").Append(RelatedDocument).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20019)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20019 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20019 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20019 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    TaskId == other.TaskId ||
                    TaskId != null &&
                    TaskId.Equals(other.TaskId)
                ) && 
                (
                    TaskFileName == other.TaskFileName ||
                    TaskFileName != null &&
                    TaskFileName.Equals(other.TaskFileName)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DateDone == other.DateDone ||
                    DateDone != null &&
                    DateDone.Equals(other.DateDone)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) && 
                (
                    Acknowledged == other.Acknowledged ||
                    Acknowledged != null &&
                    Acknowledged.Equals(other.Acknowledged)
                ) && 
                (
                    RelatedDocument == other.RelatedDocument ||
                    RelatedDocument != null &&
                    RelatedDocument.Equals(other.RelatedDocument)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (TaskId != null)
                    hashCode = hashCode * 59 + TaskId.GetHashCode();
                    if (TaskFileName != null)
                    hashCode = hashCode * 59 + TaskFileName.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DateDone != null)
                    hashCode = hashCode * 59 + DateDone.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (Acknowledged != null)
                    hashCode = hashCode * 59 + Acknowledged.GetHashCode();
                    if (RelatedDocument != null)
                    hashCode = hashCode * 59 + RelatedDocument.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20019 left, InlineResponse20019 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20019 left, InlineResponse20019 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
