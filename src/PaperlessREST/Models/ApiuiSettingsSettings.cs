/*
 * Paperless Rest Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApiuiSettingsSettings : IEquatable<ApiuiSettingsSettings>
    { 
        /// <summary>
        /// Gets or Sets UpdateChecking
        /// </summary>
        [Required]

        [DataMember(Name="update_checking")]
        public ApiuiSettingsSettingsUpdateChecking UpdateChecking { get; set; }

        /// <summary>
        /// Gets or Sets TourComplete
        /// </summary>
        [Required]

        [DataMember(Name="tour_complete")]
        public bool? TourComplete { get; set; }

        /// <summary>
        /// Gets or Sets BulkEdit
        /// </summary>
        [Required]

        [DataMember(Name="bulk_edit")]
        public ApiuiSettingsSettingsBulkEdit BulkEdit { get; set; }

        /// <summary>
        /// Gets or Sets DocumentListSize
        /// </summary>
        [Required]

        [DataMember(Name="documentListSize")]
        public int? DocumentListSize { get; set; }

        /// <summary>
        /// Gets or Sets SlimSidebar
        /// </summary>
        [Required]

        [DataMember(Name="slim_sidebar")]
        public bool? SlimSidebar { get; set; }

        /// <summary>
        /// Gets or Sets DarkMode
        /// </summary>
        [Required]

        [DataMember(Name="dark_mode")]
        public ApiuiSettingsSettingsDarkMode DarkMode { get; set; }

        /// <summary>
        /// Gets or Sets Theme
        /// </summary>
        [Required]

        [DataMember(Name="theme")]
        public ApiuiSettingsSettingsTheme Theme { get; set; }

        /// <summary>
        /// Gets or Sets DocumentDetails
        /// </summary>
        [Required]

        [DataMember(Name="document_details")]
        public ApiuiSettingsSettingsDocumentDetails DocumentDetails { get; set; }

        /// <summary>
        /// Gets or Sets DateDisplay
        /// </summary>
        [Required]

        [DataMember(Name="date_display")]
        public ApiuiSettingsSettingsDateDisplay DateDisplay { get; set; }

        /// <summary>
        /// Gets or Sets Notifications
        /// </summary>
        [Required]

        [DataMember(Name="notifications")]
        public ApiuiSettingsSettingsNotifications Notifications { get; set; }

        /// <summary>
        /// Gets or Sets NotesEnabled
        /// </summary>
        [Required]

        [DataMember(Name="notes_enabled")]
        public bool? NotesEnabled { get; set; }

        /// <summary>
        /// Gets or Sets SavedViews
        /// </summary>
        [Required]

        [DataMember(Name="saved_views")]
        public ApiuiSettingsSettingsSavedViews SavedViews { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [Required]

        [DataMember(Name="language")]
        public string Language { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApiuiSettingsSettings {\n");
            sb.Append("  UpdateChecking: ").Append(UpdateChecking).Append("\n");
            sb.Append("  TourComplete: ").Append(TourComplete).Append("\n");
            sb.Append("  BulkEdit: ").Append(BulkEdit).Append("\n");
            sb.Append("  DocumentListSize: ").Append(DocumentListSize).Append("\n");
            sb.Append("  SlimSidebar: ").Append(SlimSidebar).Append("\n");
            sb.Append("  DarkMode: ").Append(DarkMode).Append("\n");
            sb.Append("  Theme: ").Append(Theme).Append("\n");
            sb.Append("  DocumentDetails: ").Append(DocumentDetails).Append("\n");
            sb.Append("  DateDisplay: ").Append(DateDisplay).Append("\n");
            sb.Append("  Notifications: ").Append(Notifications).Append("\n");
            sb.Append("  NotesEnabled: ").Append(NotesEnabled).Append("\n");
            sb.Append("  SavedViews: ").Append(SavedViews).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApiuiSettingsSettings)obj);
        }

        /// <summary>
        /// Returns true if ApiuiSettingsSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of ApiuiSettingsSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApiuiSettingsSettings other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    UpdateChecking == other.UpdateChecking ||
                    UpdateChecking != null &&
                    UpdateChecking.Equals(other.UpdateChecking)
                ) && 
                (
                    TourComplete == other.TourComplete ||
                    TourComplete != null &&
                    TourComplete.Equals(other.TourComplete)
                ) && 
                (
                    BulkEdit == other.BulkEdit ||
                    BulkEdit != null &&
                    BulkEdit.Equals(other.BulkEdit)
                ) && 
                (
                    DocumentListSize == other.DocumentListSize ||
                    DocumentListSize != null &&
                    DocumentListSize.Equals(other.DocumentListSize)
                ) && 
                (
                    SlimSidebar == other.SlimSidebar ||
                    SlimSidebar != null &&
                    SlimSidebar.Equals(other.SlimSidebar)
                ) && 
                (
                    DarkMode == other.DarkMode ||
                    DarkMode != null &&
                    DarkMode.Equals(other.DarkMode)
                ) && 
                (
                    Theme == other.Theme ||
                    Theme != null &&
                    Theme.Equals(other.Theme)
                ) && 
                (
                    DocumentDetails == other.DocumentDetails ||
                    DocumentDetails != null &&
                    DocumentDetails.Equals(other.DocumentDetails)
                ) && 
                (
                    DateDisplay == other.DateDisplay ||
                    DateDisplay != null &&
                    DateDisplay.Equals(other.DateDisplay)
                ) && 
                (
                    Notifications == other.Notifications ||
                    Notifications != null &&
                    Notifications.Equals(other.Notifications)
                ) && 
                (
                    NotesEnabled == other.NotesEnabled ||
                    NotesEnabled != null &&
                    NotesEnabled.Equals(other.NotesEnabled)
                ) && 
                (
                    SavedViews == other.SavedViews ||
                    SavedViews != null &&
                    SavedViews.Equals(other.SavedViews)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (UpdateChecking != null)
                    hashCode = hashCode * 59 + UpdateChecking.GetHashCode();
                    if (TourComplete != null)
                    hashCode = hashCode * 59 + TourComplete.GetHashCode();
                    if (BulkEdit != null)
                    hashCode = hashCode * 59 + BulkEdit.GetHashCode();
                    if (DocumentListSize != null)
                    hashCode = hashCode * 59 + DocumentListSize.GetHashCode();
                    if (SlimSidebar != null)
                    hashCode = hashCode * 59 + SlimSidebar.GetHashCode();
                    if (DarkMode != null)
                    hashCode = hashCode * 59 + DarkMode.GetHashCode();
                    if (Theme != null)
                    hashCode = hashCode * 59 + Theme.GetHashCode();
                    if (DocumentDetails != null)
                    hashCode = hashCode * 59 + DocumentDetails.GetHashCode();
                    if (DateDisplay != null)
                    hashCode = hashCode * 59 + DateDisplay.GetHashCode();
                    if (Notifications != null)
                    hashCode = hashCode * 59 + Notifications.GetHashCode();
                    if (NotesEnabled != null)
                    hashCode = hashCode * 59 + NotesEnabled.GetHashCode();
                    if (SavedViews != null)
                    hashCode = hashCode * 59 + SavedViews.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApiuiSettingsSettings left, ApiuiSettingsSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApiuiSettingsSettings left, ApiuiSettingsSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
