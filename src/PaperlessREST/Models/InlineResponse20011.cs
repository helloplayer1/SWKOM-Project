/*
 * Paperless Rest Server
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InlineResponse20011 : IEquatable<InlineResponse20011>
    { 
        /// <summary>
        /// Gets or Sets DocumentsTotal
        /// </summary>
        [Required]

        [DataMember(Name="documents_total")]
        public int? DocumentsTotal { get; set; }

        /// <summary>
        /// Gets or Sets DocumentsInbox
        /// </summary>
        [Required]

        [DataMember(Name="documents_inbox")]
        public int? DocumentsInbox { get; set; }

        /// <summary>
        /// Gets or Sets InboxTag
        /// </summary>
        [Required]

        [DataMember(Name="inbox_tag")]
        public int? InboxTag { get; set; }

        /// <summary>
        /// Gets or Sets DocumentFileTypeCounts
        /// </summary>
        [Required]

        [DataMember(Name="document_file_type_counts")]
        public List<InlineResponse20011DocumentFileTypeCounts> DocumentFileTypeCounts { get; set; }

        /// <summary>
        /// Gets or Sets CharacterCount
        /// </summary>
        [Required]

        [DataMember(Name="character_count")]
        public int? CharacterCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InlineResponse20011 {\n");
            sb.Append("  DocumentsTotal: ").Append(DocumentsTotal).Append("\n");
            sb.Append("  DocumentsInbox: ").Append(DocumentsInbox).Append("\n");
            sb.Append("  InboxTag: ").Append(InboxTag).Append("\n");
            sb.Append("  DocumentFileTypeCounts: ").Append(DocumentFileTypeCounts).Append("\n");
            sb.Append("  CharacterCount: ").Append(CharacterCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InlineResponse20011)obj);
        }

        /// <summary>
        /// Returns true if InlineResponse20011 instances are equal
        /// </summary>
        /// <param name="other">Instance of InlineResponse20011 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InlineResponse20011 other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DocumentsTotal == other.DocumentsTotal ||
                    DocumentsTotal != null &&
                    DocumentsTotal.Equals(other.DocumentsTotal)
                ) && 
                (
                    DocumentsInbox == other.DocumentsInbox ||
                    DocumentsInbox != null &&
                    DocumentsInbox.Equals(other.DocumentsInbox)
                ) && 
                (
                    InboxTag == other.InboxTag ||
                    InboxTag != null &&
                    InboxTag.Equals(other.InboxTag)
                ) && 
                (
                    DocumentFileTypeCounts == other.DocumentFileTypeCounts ||
                    DocumentFileTypeCounts != null &&
                    DocumentFileTypeCounts.SequenceEqual(other.DocumentFileTypeCounts)
                ) && 
                (
                    CharacterCount == other.CharacterCount ||
                    CharacterCount != null &&
                    CharacterCount.Equals(other.CharacterCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DocumentsTotal != null)
                    hashCode = hashCode * 59 + DocumentsTotal.GetHashCode();
                    if (DocumentsInbox != null)
                    hashCode = hashCode * 59 + DocumentsInbox.GetHashCode();
                    if (InboxTag != null)
                    hashCode = hashCode * 59 + InboxTag.GetHashCode();
                    if (DocumentFileTypeCounts != null)
                    hashCode = hashCode * 59 + DocumentFileTypeCounts.GetHashCode();
                    if (CharacterCount != null)
                    hashCode = hashCode * 59 + CharacterCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InlineResponse20011 left, InlineResponse20011 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InlineResponse20011 left, InlineResponse20011 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
